---
import slugify from "slugify";
import Layout from "@/layouts/Layout.astro";
import AboutSection from "@/components/Sections/AboutSection.astro";
import ExperienceSection from "@/components/Sections/ExperienceSection.astro";
import EducationSection from "@/components/Sections/EducationSection.astro";
import SkillsSection from "@/components/Sections/SkillsSection.astro";
import ProjectsSection from "@/components/Sections/ProjectsSection.astro";
import PostsSection from "@/components/Sections/PostsSection.astro";

const SECTION_CONFIG = {
  about: {
    component: AboutSection,
    title: "About",
    order: 1,
  },
  stack: {
    component: SkillsSection,
    title: "Stack",
    order: 2,
  },
  projects: {
    component: ProjectsSection,
    title: "Projects",
    order: 3,
  },
  education: {
    component: EducationSection,
    title: "Education",
    order: 4,
  },
  experience: {
    component: ExperienceSection,
    title: "Experience",
    order: 5,
  },
  posts: {
    component: PostsSection,
    title: "Posts",
    order: 6,
  },
} as const;

const PERSONAL_INFO = {
  name: "Prashant Bhardwaj",
  title: "dev",
  description: "I read books and write code.",
} as const;

const sections = Object.entries(SECTION_CONFIG).sort(
  ([, a], [, b]) => a.order - b.order
);

const navItems = sections.map(([key]) => key);
---

<Layout
  isHome={true}
  title={PERSONAL_INFO.name}
  subtitle={PERSONAL_INFO.title}
  details={PERSONAL_INFO.description}
  navItems={navItems}
>
  {
    sections.map(([sectionKey, sectionConfig]) => {
      const SectionComponent = sectionConfig.component;
      const sectionId = slugify(sectionKey, { lower: true });

      return (
        <section
          id={sectionId}
          class="portfolio-section"
          data-section={sectionKey}
        >
          <h1 class="section-title">{sectionConfig.title}</h1>
          <div class="section-content">
            <SectionComponent />
          </div>
        </section>
      );
    })
  }
</Layout>

<style>
  .portfolio-section {
    padding-bottom: 6rem;
    transition: opacity 500ms ease-in-out;
  }

  .section-title {
    font-size: 1.7rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 2.5rem;
    color: var(--color-foreground, currentColor);
  }

  .section-content {
    position: relative;
  }

  h2 {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 1rem;
  }

  @media (min-width: 1024px) {
    .portfolio-section {
      scroll-margin-top: 6rem;
      padding-top: 0;
      opacity: 0.5;
    }

    .portfolio-section:focus-within,
    .portfolio-section.section-focus {
      opacity: 1;
    }

    .portfolio-section:last-of-type {
      padding-bottom: 0;
    }

    .portfolio-section:focus-visible {
      outline: 2px solid var(--color-ring, #ffffff);
      outline-offset: 4px;
      border-radius: 4px;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .portfolio-section {
      transition: none;
    }
  }

  @media print {
    .portfolio-section {
      break-inside: avoid;
      opacity: 1 !important;
      padding-bottom: 2rem;
    }
  }
</style>

<script>
  (function () {
    const referrer = document.referrer;
    const currentDomain = window.location.hostname;
    const isExternalReferrer = !referrer || !referrer.includes(currentDomain);

    if (window.location.hash && isExternalReferrer) {
      history.replaceState(
        null,
        "",
        window.location.pathname + window.location.search
      );
    }
  })();

  class PortfolioLayoutManager {
    resizeObserver;
    intersectionObserver;
    DESKTOP_BREAKPOINT = 1024;
    DEBOUNCE_DELAY = 300;
    hasUserInteracted = false;

    init() {
      this.alignLastSection();
      this.observeVisibility();
      this.setupEventListeners();
      this.setupUserInteractionDetection();
    }

    setupUserInteractionDetection() {
      const events = ["scroll", "click", "keydown", "touchstart"];
      const handler = () => {
        this.hasUserInteracted = true;
        events.forEach((e) => document.removeEventListener(e, handler));
      };
      events.forEach((e) =>
        document.addEventListener(e, handler, { once: true })
      );
      setTimeout(() => {
        this.hasUserInteracted = true;
      }, 2000);
    }

    setupEventListeners() {
      if ("ResizeObserver" in window) {
        this.resizeObserver = new ResizeObserver(
          this.debounce(() => this.handleResize(), this.DEBOUNCE_DELAY)
        );
        this.resizeObserver.observe(document.body);
      } else {
        window.addEventListener(
          "resize",
          this.debounce(() => this.handleResize(), this.DEBOUNCE_DELAY)
        );
      }
    }

    handleResize() {
      this.alignLastSection();
    }

    alignLastSection() {
      const lastSection = document.querySelector(
        ".portfolio-section:last-of-type"
      );
      const header = document.querySelector("header");
      const footer = document.querySelector("footer");

      if (!lastSection || !header) return;

      if (window.innerWidth < this.DESKTOP_BREAKPOINT) {
        lastSection.style.paddingBottom = "";
        if (footer) {
          footer.style.position = "";
          footer.style.marginTop = "";
        }
        return;
      }

      try {
        const headerStyle = getComputedStyle(header);
        const headerPadding =
          parseInt(headerStyle.paddingTop || "0", 10) +
          parseInt(headerStyle.paddingBottom || "0", 10);

        const lastSectionStyle = getComputedStyle(lastSection);
        const lastSectionHeight =
          parseInt(lastSectionStyle.height || "0", 10) -
          parseInt(lastSectionStyle.paddingBottom || "0", 10);

        const requiredPadding = Math.max(
          0,
          window.innerHeight - headerPadding - lastSectionHeight
        );

        lastSection.style.paddingBottom = `${requiredPadding}px`;

        if (footer) {
          const footerHeight = parseInt(getComputedStyle(footer).height || "0", 10);
          const shouldFloat = requiredPadding >= footerHeight;

          footer.style.position = shouldFloat ? "absolute" : "relative";
          footer.style.marginTop = shouldFloat ? "0" : "6rem";
        }
      } catch (error) {
        console.warn("Error aligning last section:", error);
      }
    }

    observeVisibility() {
      if (!("IntersectionObserver" in window)) return;
      const sections = document.querySelectorAll(".portfolio-section");

      this.intersectionObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            const section = entry.target;

            if (entry.isIntersecting) {
              section.classList.add("section-focus");
              const sectionId = section.id;
              if (
                sectionId &&
                this.hasUserInteracted &&
                window.location.hash !== `#${sectionId}`
              ) {
                history.replaceState(null, "", `#${sectionId}`);
              }
            } else {
              section.classList.remove("section-focus");
            }
          });
        },
        {
          threshold: 0.3,
          rootMargin: "-10% 0px -10% 0px",
        }
      );

      sections.forEach((section) => this.intersectionObserver.observe(section));
    }

    debounce(func, wait) {
      let timeout;
      return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    destroy() {
      this.resizeObserver?.disconnect();
      this.intersectionObserver?.disconnect();
    }
  }

  const layoutManager = new PortfolioLayoutManager();

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => layoutManager.init());
  } else {
    layoutManager.init();
  }

  window.addEventListener("beforeunload", () => layoutManager.destroy());
</script>
