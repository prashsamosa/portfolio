---
interface Props {
  navItems: string[];
}

const { navItems } = Astro.props;
---

<nav class="nav" aria-label="Page sections">
  <ul class="nav__list">
    {
      navItems.map((item) => (
        <li class="nav__item">
          <a
            href={`#${item.toLowerCase().replace(/\s+/g, "-")}`}
            class="nav__link"
            data-section={item.toLowerCase().replace(/\s+/g, "-")}
          >
            {item}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  // Add active state management
  const navLinks = document.querySelectorAll(".nav__link");
  const sections = document.querySelectorAll("[id]");

  const observerOptions = {
    root: null,
    rootMargin: "-20% 0px -80% 0px",
    threshold: 0,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        navLinks.forEach((link) => link.classList.remove("nav__link--active"));
        const activeLink = document.querySelector(
          `[data-section="${entry.target.id}"]`
        );
        activeLink?.classList.add("nav__link--active");
      }
    });
  }, observerOptions);

  sections.forEach((section) => observer.observe(section));
</script>

<style>
  .nav {
    display: none;
  }

  .nav__list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .nav__item {
    margin-bottom: 0.5rem;
  }

  .nav__link {
    display: block;
    color: var(--primary-text);
    opacity: 0.4;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 0.1rem;
    padding: 0.25rem 0;
    transition: all 0.3s ease;
    border-left: 2px solid transparent;
    padding-left: 0.5rem;
  }

  .nav__link:hover,
  .nav__link:focus {
    opacity: 0.7;
    outline: none;
  }

  .nav__link--active {
    opacity: 1;
    border-left-color: var(--accent-color, #ffffff);
  }

  @media only screen and (min-width: 1024px) {
    .nav {
      display: block;
    }
  }
</style>
