---
interface Props {
  navItems: string[];
}

const { navItems } = Astro.props;
---

<nav class="nav" aria-label="Page sections">
  <ul class="nav__list">
    {
      navItems.map((item) => {
        const id = item.toLowerCase().replace(/\s+/g, "-");
        return (
          <li class="nav__item">
            <a href={`#${id}`} class="nav__link" data-section={id}>
              {item}
            </a>
          </li>
        );
      })
    }
  </ul>
</nav>

<script>
  class NavigationManager {
    navLinks;
    sections;
    observer;
    hasUserInteracted = false;
    scrollTimeout;

    constructor() {
      this.navLinks = document.querySelectorAll(".nav__link");
      this.sections = document.querySelectorAll("[id]");
      this.init();
    }

    init() {
      this.setupEventListeners();
      this.setupIntersectionObserver();
    }

    setupEventListeners() {
      // Track user interaction
      this.navLinks.forEach((link) => {
        link.addEventListener("click", () => {
          this.hasUserInteracted = true;
        });
      });

      // Track scroll interaction
      window.addEventListener(
        "scroll",
        () => {
          clearTimeout(this.scrollTimeout);
          this.scrollTimeout = setTimeout(() => {
            this.hasUserInteracted = true;
          }, 100);
        },
        { passive: true }
      );
    }

    setupIntersectionObserver() {
      const observerOptions = {
        root: null,
        rootMargin: "-20% 0px -80% 0px",
        threshold: 0,
      };

      this.observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            this.setActiveLink(entry.target.id);
          }
        });
      }, observerOptions);

      this.sections.forEach((section) => {
        if (section.id) {
          this.observer.observe(section);
        }
      });
    }

    setActiveLink(sectionId) {
      // Remove active class from all links
      this.navLinks.forEach((link) =>
        link.classList.remove("nav__link--active")
      );

      // Add active class to current link
      const activeLink = document.querySelector(
        `[data-section="${sectionId}"]`
      );
      if (activeLink) {
        activeLink.classList.add("nav__link--active");
      }
    }

    destroy() {
      if (this.observer) {
        this.observer.disconnect();
      }
      clearTimeout(this.scrollTimeout);
    }
  }

  // Initialize navigation manager
  let navigationManager;

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      navigationManager = new NavigationManager();
    });
  } else {
    navigationManager = new NavigationManager();
  }

  // Cleanup on page unload
  window.addEventListener("beforeunload", () => {
    if (navigationManager) {
      navigationManager.destroy();
    }
  });
</script>

<style>
  .nav {
    display: none;
  }

  .nav__list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .nav__item {
    margin-bottom: 0.5rem;
  }

  .nav__link {
    display: block;
    color: var(--primary-text, currentColor);
    opacity: 0.4;
    text-decoration: none;
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 0.1rem;
    padding: 0.25rem 0;
    transition: all 0.3s ease;
    border-left: 2px solid transparent;
    padding-left: 0.5rem;
  }

  .nav__link:hover,
  .nav__link:focus {
    opacity: 0.7;
    outline: none;
  }

  .nav__link:focus-visible {
    outline: 2px solid var(--accent-color, #ffffff);
    outline-offset: 2px;
  }

  .nav__link--active {
    opacity: 1;
    border-left-color: var(--accent-color, #ffffff);
  }

  @media only screen and (min-width: 1024px) {
    .nav {
      display: block;
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .nav__link {
      transition: none;
    }
  }
</style>
